name: Trigger Contract Terms Action

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  trigger-contract-terms:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate required secret
      run: |
        if [ -z "${{ secrets.CONTRACT_TERMS_PAT }}" ]; then
          echo "Error: CONTRACT_TERMS_PAT secret is not set." >&2
          exit 1
        fi
        echo "Secret CONTRACT_TERMS_PAT is configured."

    - name: Basic token checks
      id: token-check
      env:
        GH_REPO: ERMInc/contract_terms
      run: |
        set -e
        user_status=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" https://api.github.com/user)
        if [ "$user_status" != "200" ]; then
          echo "::error:: /user status $user_status (invalid / expired / SSO not authorized)."; exit 1; fi
        repo_status=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" https://api.github.com/repos/$GH_REPO)
        if [ "$repo_status" != "200" ]; then
          echo "::error:: cannot read repo (status $repo_status) - missing repo selection or membership."; exit 1; fi
        echo "Token visibility checks passed."

    - name: Collect commit info
      id: commit-info
      run: |
        echo "commit_id=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "commit_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "commit_url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Build payload
      id: build-payload
      run: |
        cat > payload.json <<EOF
        {
          "source_repo": "${{ github.repository }}",
          "commit_id": "${{ steps.commit-info.outputs.commit_id }}",
          "commit_message": "${{ steps.commit-info.outputs.commit_message }}",
          "commit_author": "${{ steps.commit-info.outputs.commit_author }}",
          "commit_url": "${{ steps.commit-info.outputs.commit_url }}",
          "branch": "${{ github.ref_name }}",
          "triggered_by": "${{ github.actor }}",
          "timestamp": "${{ steps.commit-info.outputs.timestamp }}"
        }
        EOF
        echo "client_payload=$(jq -c . payload.json)" >> $GITHUB_OUTPUT
        echo "Payload:"; cat payload.json

    - name: Dispatch event
      id: dispatch
      run: |
        body=$(jq -c '{event_type:"document-updated", client_payload: .}' payload.json)
        status=$(echo "$body" | curl -s -D headers.txt -o resp_body.json -w "%{http_code}" -X POST \
          -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/ERMInc/contract_terms/dispatches \
          -d @-)
        echo "status=$status" >> $GITHUB_OUTPUT
        echo "HTTP status: $status"
        echo "--- Response headers ---"; cat headers.txt; echo "------------------------";
        if [ -s resp_body.json ]; then echo "Response body:"; cat resp_body.json; fi
        if [ "$status" != "204" ]; then
          echo "::error:: Dispatch failed (status $status). Ensure PAT has Actions (read & write) permission or classic PAT includes workflow scope."; exit 1; fi
        echo "Dispatch succeeded."

    - name: Summary
      run: |
        echo "Triggered document-updated in ERMInc/contract_terms"