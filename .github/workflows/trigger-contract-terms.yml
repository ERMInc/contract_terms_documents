name: Trigger Contract Terms Action

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  actions: write
  
jobs:
  trigger-contract-terms:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate required secret
      run: |
        if [ -z "${{ secrets.CONTRACT_TERMS_PAT }}" ]; then
          echo "Error: CONTRACT_TERMS_PAT secret is not set in this repository settings." >&2
          exit 1
        fi
        echo "Secret CONTRACT_TERMS_PAT is configured."

    - name: Quick diagnostics for PAT (no secrets printed)
      id: pat-diagnostics
      env:
        GH_REPO: ERMInc/contract_terms
      run: |
        set -e
        echo "Checking token basic scopes via /user endpoint..."
        user_status=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" https://api.github.com/user)
        if [ "$user_status" != "200" ]; then
          echo "user_endpoint=FAIL ($user_status)" >> $GITHUB_OUTPUT
          echo "::warning::Token unable to access /user (status $user_status). Possibly invalid, expired, SSO not authorized, or fine-grained restrictions." 
        else
          echo "user_endpoint=OK" >> $GITHUB_OUTPUT
        fi
        echo "Checking repo dispatch permission (HEAD repo)..."
        repo_status=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" https://api.github.com/repos/$GH_REPO)
        if [ "$repo_status" != "200" ]; then
          echo "repo_access=FAIL ($repo_status)" >> $GITHUB_OUTPUT
          echo "::warning::Token cannot read target repo ($repo_status). Ensure PAT owner has at least read access and SSO is authorized." 
        else
          echo "repo_access=OK" >> $GITHUB_OUTPUT
        fi
        echo "Diagnostics complete."        
    
    - name: Get commit information
      id: commit-info
      run: |
        echo "commit_id=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "commit_message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT
        echo "commit_author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
        echo "commit_url=https://github.com/${{ github.repository }}/commit/${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
    
    - name: Build dispatch payload
      id: build-payload
      run: |
        cat > payload.json <<EOF
        {
          "source_repo": "${{ github.repository }}",
          "commit_id": "${{ steps.commit-info.outputs.commit_id }}",
          "commit_message": "${{ steps.commit-info.outputs.commit_message }}",
          "commit_author": "${{ steps.commit-info.outputs.commit_author }}",
          "commit_url": "${{ steps.commit-info.outputs.commit_url }}",
          "branch": "${{ github.ref_name }}",
          "triggered_by": "${{ github.actor }}",
          "timestamp": "${{ steps.commit-info.outputs.timestamp }}"
        }
        EOF
        echo "client_payload=$(jq -c . payload.json)" >> $GITHUB_OUTPUT
        echo "Payload built:" && cat payload.json
    
    - name: Create trigger file for monitoring
      run: |
        cp payload.json trigger-info.json
        echo "Trigger file created  target repo can monitor this via GitHub API"

    - name: Fail early if diagnostics show token issues
      if: steps.pat-diagnostics.outputs.user_endpoint != 'OK' || steps.pat-diagnostics.outputs.repo_access != 'OK'
      run: |
        echo "Token diagnostics failed. See warnings above." >&2
        exit 1

    - name: Raw repository_dispatch probe
      id: dispatch-probe
      run: |
        echo '{"event_type":"document-updated","client_payload":'$(cat payload.json)'}' > dispatch_request.json
        status=$(curl -s -o resp_body.json -w "%{http_code}" -X POST \
          -H "Authorization: token ${{ secrets.CONTRACT_TERMS_PAT }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/ERMInc/contract_terms/dispatches \
          -d @dispatch_request.json)
        echo "status=$status" >> $GITHUB_OUTPUT
        echo "Response status: $status"
        if [ -s resp_body.json ]; then
          echo "--- Response body ---"; cat resp_body.json; echo "----------------------";
          # Attempt to extract message field if JSON
          msg=$(jq -r '.message // empty' resp_body.json 2>/dev/null || true)
          if [ -n "$msg" ]; then
            echo "message=$msg" >> $GITHUB_OUTPUT
          fi
        else
          echo "(Empty body)"
        fi

    - name: Dispatch event to contract_terms repository (fallback action)
      if: steps.dispatch-probe.outputs.status != '204'
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.CONTRACT_TERMS_PAT }}
        repository: ERMInc/contract_terms
        event-type: document-updated
        client-payload: ${{ steps.build-payload.outputs.client_payload }}

    - name: Fail if both raw and action dispatch failed
      if: steps.dispatch-probe.outputs.status != '204' && failure()
      run: |
        echo "Both raw probe and action dispatch failed." >&2
        exit 1

    - name: Log trigger event
      run: |
        echo "Dispatch probe HTTP status: ${{ steps.dispatch-probe.outputs.status }}"
        echo "Repository dispatch (raw) ${ { steps.dispatch-probe.outputs.status == '204' && 'succeeded' || 'attempted' } }"
        echo "Source commit: ${{ steps.commit-info.outputs.commit_id }}"
        echo "Commit message: ${{ steps.commit-info.outputs.commit_message }}"
        echo "Branch: ${{ github.ref_name }}"